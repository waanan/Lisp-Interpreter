#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 128 0 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 128 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 5483 0 27 3 10 #"#lang eopl"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 18 3 7 #";;store"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 23 3 3 #"())"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"empty-store"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 4 #" () "
0 0 21 3 1 #"'"
0 0 23 3 4 #"()))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"get-store"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 4 #" () "
0 0 14 3 9 #"the-store"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 17 #"initialize-store!"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 2 #" ("
0 0 14 3 11 #"empty-store"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"reference?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"integer?"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"newref"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 8 #"next-ref"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 8 #"next-ref"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"deref"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 1 #" "
0 0 14 3 3 #"ref"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"setref!"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 16 3 6 #"letrec"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"              (("
0 0 14 3 12 #"setref-inner"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 6 #"store1"
0 0 23 3 1 #" "
0 0 14 3 4 #"ref1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 16 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 6 #"store1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"setref"
0 0 23 3 1 #" "
0 0 20 3 25 #"\"Invalid reference ~s ~s\""
0 0 23 3 1 #" "
0 0 14 3 3 #"ref"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                        (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 4 #"ref1"
0 0 23 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"store1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"store1"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 12 #"setref-inner"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"store1"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ref1"
0 0 23 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 8 #"))))))))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 12 #"setref-inner"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 1 #" "
0 0 14 3 3 #"ref"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 18 3 18 #";;new-nameless-env"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 21 #"nameless-environment?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    (("
0 0 14 3 7 #"list-of"
0 0 23 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 7 #"expval?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 7 #"expval?"
0 0 23 3 2 #") "
0 0 14 3 1 #"x"
0 0 23 3 4 #"))) "
0 0 14 3 1 #"x"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 18 #"empty-nameless-env"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 21 3 1 #"'"
0 0 23 3 4 #"()))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 19 #"extend-nameless-env"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 18 #"apply-nameless-env"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"body"
0 0 23 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 23 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"newref"
0 0 23 3 2 #" ("
0 0 14 3 8 #"proc-val"
0 0 23 3 2 #" ("
0 0 14 3 9 #"procedure"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 2 #" ("
0 0 14 3 3 #"nth"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 10 #"))))))))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"nth"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 3 #"lst"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 3 #"nth"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"list-ref"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"list-ref"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 17 #"init-nameless-env"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 18 #"empty-nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"empty-senv"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 21 3 1 #"'"
0 0 23 3 4 #"()))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"extend-senv"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"apply-senv-iter"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"senv"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 6 #"cankao"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 23 #"report-no-binding-found"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"            (("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 23 3 1 #" "
0 0 14 3 6 #"cankao"
0 0 23 3 3 #") ("
0 0 14 3 6 #"member"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 6 #"cankao"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 15 #"apply-senv-iter"
0 0 23 3 1 #" "
0 0 14 3 6 #"cankao"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 15 #"apply-senv-iter"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 2 #") "
0 0 14 3 3 #"var"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"apply-senv"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"senv"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 15 #"apply-senv-iter"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"init-senv"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 11 #"extend-senv"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"i"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 11 #"extend-senv"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"v"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 11 #"extend-senv"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 29 1 #"\n"
0 0 23 3 44 #"                                           ("
0 0 14 3 10 #"empty-senv"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 23 #"report-no-binding-found"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 10 #"search-var"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"apply-env"
0 0 23 3 1 #" "
0 0 20 3 19 #"\"No binding for ~s\""
0 0 23 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 18 #"report-invalid-env"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"apply-env"
0 0 23 3 1 #" "
0 0 20 3 21 #"\"Bad environment: ~s\""
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 18 3 15 #";;help-function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"list-of"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 21 3 2 #"#t"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"pred"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"               (("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"pred"
0 0 23 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 18 3 16 #";;program define"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 15 #"define-datatype"
0 0 23 3 1 #" "
0 0 14 3 7 #"program"
0 0 23 3 1 #" "
0 0 14 3 8 #"program?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"a-program"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 15 #"define-datatype"
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"const1-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 14 3 7 #"number?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"const2-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"bool"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"emptylist"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 13 #"construct-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"car-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"cdr-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"null?-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"list-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exps"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"diff-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"zero?-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"if-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp3"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"cond-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 5 #"exps1"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 5 #"exps2"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"var-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 16 #"nameless-var-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 7 #"number?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"mutable"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"let-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"lst1"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"lst2"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 16 #"nameless-let-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exps"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 14 #"letmutable-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"lst1"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"lst2"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 23 #"nameless-letmutable-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exps"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 17 #"nameless-proc-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"let*-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"lst1"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"lst2"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 17 #"nameless-let*-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exps"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"letrec-exp"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 7 #"p-names"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 6 #"b-vars"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 5 #"bodys"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 11 #"letrec-body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"nameless-letrec-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 5 #"bodys"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 11 #"letrec-body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"unpack-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 3 #"lst"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"nameless-unpack-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"setdyn-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"nameless-setdyn-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 7 #"number?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"assign-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"nameless-assign-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 7 #"number?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"beg-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exps"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"minus-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"add-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"multi-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"quoti-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"equal?-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"less?-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"greater?-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"proc-exp"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"vars"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"call-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 5 #"rands"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 18 3 12 #";;scan-parse"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"scanner-spec"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 21 3 1 #"'"
0 0 23 3 2 #"(("
0 0 14 3 8 #"white-sp"
0 0 23 3 2 #" ("
0 0 14 3 10 #"whitespace"
0 0 23 3 2 #") "
0 0 14 3 4 #"skip"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 7 #"comment"
0 0 23 3 2 #" ("
0 0 20 3 3 #"\";\""
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 23 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"identifier"
0 0 23 3 2 #" ("
0 0 14 3 6 #"letter"
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 2 #" ("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 14 3 6 #"letter"
0 0 23 3 1 #" "
0 0 14 3 5 #"digit"
0 0 23 3 4 #"))) "
0 0 14 3 6 #"symbol"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 18 3 41 #";    (boolean (\"#\" (or \"t\" \"f\")) symbol) "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 6 #"number"
0 0 23 3 3 #" (("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"-\""
0 0 23 3 2 #") "
0 0 14 3 5 #"digit"
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 1 #" "
0 0 14 3 5 #"digit"
0 0 23 3 3 #")) "
0 0 14 3 6 #"number"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 21 3 1 #"'"
0 0 23 3 2 #"(("
0 0 14 3 7 #"program"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 9 #"a-program"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 6 #"number"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 10 #"const1-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 3 #"\"#\""
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 10 #"const2-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 3 #"\"-\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\",\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 8 #"diff-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 10 #"identifier"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 7 #"\"zero?\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 9 #"zero?-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 4 #"\"if\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 6 #"\"then\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 6 #"\"else\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 6 #"if-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 6 #"\"cond\""
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 5 #"\"==>\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 2 #") "
0 0 20 3 5 #"\"end\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 8 #"cond-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 5 #"\"let\""
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 20 3 3 #"\"=\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 2 #") "
0 0 20 3 4 #"\"in\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 7 #"let-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 6 #"\"let*\""
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 20 3 3 #"\"=\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 2 #") "
0 0 20 3 4 #"\"in\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 8 #"let*-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 12 #"\"letmutable\""
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 20 3 3 #"\"=\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 2 #") "
0 0 20 3 4 #"\"in\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 14 #"letmutable-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 8 #"\"letrec\""
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"=\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 2 #") "
0 0 20 3 4 #"\"in\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 10 #"letrec-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 8 #"\"unpack\""
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 2 #") "
0 0 20 3 3 #"\"=\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 4 #"\"in\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 10 #"unpack-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 5 #"\"set\""
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 20 3 3 #"\"=\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 10 #"assign-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 7 #"\"begin\""
0 0 23 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\";\""
0 0 23 3 2 #") "
0 0 20 3 5 #"\"end\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 7 #"beg-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 12 #"\"setdynamic\""
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 20 3 3 #"\"=\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 8 #"\"during\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 10 #"setdyn-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 7 #"\"minus\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 9 #"minus-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 3 #"\"+\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\",\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 7 #"add-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 3 #"\"*\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\",\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 9 #"multi-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 3 #"\"/\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\",\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 9 #"quoti-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 4 #"\"=?\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\",\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 10 #"equal?-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 4 #"\">?\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\",\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 12 #"greater?-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 4 #"\"<?\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\",\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 9 #"less?-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 11 #"\"emptylist\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 9 #"emptylist"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 6 #"\"cons\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\",\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 13 #"construct-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 5 #"\"car\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 7 #"car-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 5 #"\"cdr\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 7 #"cdr-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 6 #"\"list\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\",\""
0 0 23 3 2 #") "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 8 #"list-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 7 #"\"null?\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 9 #"null?-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 6 #"\"proc\""
0 0 23 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 23 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 20 3 3 #"\",\""
0 0 23 3 2 #") "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 8 #"proc-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 20 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 2 #") "
0 0 20 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 8 #"call-exp"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"just-scan"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 26 #"sllgen:make-string-scanner"
0 0 23 3 1 #" "
0 0 14 3 12 #"scanner-spec"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 23 3 1 #" "
0 0 14 3 12 #"scanner-spec"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 18 3 8 #";;\345\205\245\345\217\243"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"run"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 6 #"string"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 16 #"value-of-program"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 22 #"translation-of-program"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"scan&parse"
0 0 23 3 1 #" "
0 0 14 3 6 #"string"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 18 3 26
(
 #";;\350\275\254\346\215\242\344\270\272\346\227"
 #"\240\345\217\230\351\207\217\345\274\217\345\255\220"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 22 #"translation-of-program"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 7 #"program"
0 0 23 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"a-program"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"a-program"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"init-senv"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 18 3 8 #";;\346\261\202\345\200\274"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 16 #"value-of-program"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 17 #"initialize-store!"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 7 #"program"
0 0 23 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"a-program"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 2 #" ("
0 0 14 3 17 #"init-nameless-env"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 18 3 20
(
 #";;\345\237\272\346\234\254\346\225"
 #"\260\346\215\256\347\261\273\345\236\213"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 15 #"define-datatype"
0 0 23 3 1 #" "
0 0 14 3 6 #"expval"
0 0 23 3 1 #" "
0 0 14 3 7 #"expval?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"num-val"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 14 3 7 #"number?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"bool-val"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"bool"
0 0 23 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"proc-val"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 5 #"proc?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"ref-val"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 3 #"ref"
0 0 23 3 1 #" "
0 0 14 3 10 #"reference?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"expval->num"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"expval"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"num-val"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 2 #") "
0 0 14 3 3 #"num"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 29 #"report-expval-extractor-error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 6 #"))))) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"expval->bool"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"expval"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"bool-val"
0 0 23 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 23 3 2 #") "
0 0 14 3 4 #"bool"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 29 #"report-expval-extractor-error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"bool"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"expval->proc"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"expval"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"proc-val"
0 0 23 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 23 3 2 #") "
0 0 14 3 4 #"proc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 29 #"report-expval-extractor-error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"expval->ref"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"expval"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"ref-val"
0 0 23 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 23 3 2 #") "
0 0 14 3 3 #"ref"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 29 #"report-expval-extractor-error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 29 #"report-expval-extractor-error"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 18 #"\"~s extract error\""
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 15 #"define-datatype"
0 0 23 3 1 #" "
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 5 #"proc?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"procedure"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 18 #"saved-nameless-env"
0 0 23 3 1 #" "
0 0 14 3 21 #"nameless-environment?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 7         331 4           0 0           0 54 0 14 3 3 #"old"
0 0 23 3 1 #" "
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"cons-accept?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 8 #"lst-exp?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 7 #"expval?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 14 #"))))          "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 15 #"define-datatype"
0 0 23 3 1 #" "
0 0 14 3 7 #"lst-exp"
0 0 23 3 1 #" "
0 0 14 3 8 #"lst-exp?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"null-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"cons-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 12 #"cons-accept?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 12 #"cons-accept?"
0 0 23 3 3 #")))"
0           0 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 15 #"define-datatype"
0 0 23 3 1 #" "
0 0 14 3 7 #"mutpair"
0 0 23 3 1 #" "
0 0 14 3 8 #"mutpair?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"a-pair"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 8 #"left-loc"
0 0 23 3 1 #" "
0 0 14 3 10 #"reference?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 9 #"right-loc"
0 0 23 3 1 #" "
0 0 14 3 10 #"reference?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"make-pair"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"val1"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 6 #"a-pair"
0 0 23 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 6 #"newref"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"left"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"p"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 7 #"mutpair"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 6 #"a-pair"
0 0 23 3 2 #" ("
0 0 14 3 8 #"left-loc"
0 0 23 3 1 #" "
0 0 14 3 9 #"right-loc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 5 #"deref"
0 0 23 3 1 #" "
0 0 14 3 8 #"left-loc"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"right"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"p"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 7 #"mutpair"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 6 #"a-pair"
0 0 23 3 2 #" ("
0 0 14 3 8 #"left-loc"
0 0 23 3 1 #" "
0 0 14 3 9 #"right-loc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 5 #"deref"
0 0 23 3 1 #" "
0 0 14 3 9 #"right-loc"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"setleft"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 18 3 8 #";;\350\275\254\346\215\242"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 14 #"translation-of"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"const1-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 3 #") ("
0 0 14 3 10 #"const1-exp"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"const2-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 23 3 3 #") ("
0 0 14 3 10 #"const2-exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"bool"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 3 #") ("
0 0 14 3 16 #"nameless-var-exp"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 10 #"apply-senv"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 13 #"construct-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 13 #"construct-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                    ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"emptylist"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"emptylist"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"car-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 7 #"car-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"cdr-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 7 #"cdr-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"list-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 8 #"list-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 3 #") ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")) "
0 0 14 3 4 #"exps"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"null?-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"null?-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"diff-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 8 #"diff-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"zero?-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"zero?-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 6 #"if-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 6 #"if-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"cond-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"exps1"
0 0 23 3 1 #" "
0 0 14 3 5 #"exps2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 8 #"cond-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")) "
0 0 14 3 5 #"exps1"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")) "
0 0 14 3 5 #"exps2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"let-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 16 #"nameless-let-exp"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 3 #") ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")) "
0 0 14 3 4 #"exps"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 23 3 1 #" "
0 0 14 3 4 #"vars"
0 0 23 3 2 #") "
0 0 14 3 4 #"senv"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 14 #"letmutable-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 23 #"nameless-letmutable-exp"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 3 #") ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")) "
0 0 14 3 4 #"exps"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 23 3 1 #" "
0 0 14 3 4 #"vars"
0 0 23 3 2 #") "
0 0 14 3 4 #"senv"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"let*-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 17 #"nameless-let*-exp"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 10 #"trans-let*"
0 0 23 3 1 #" "
0 0 14 3 4 #"vars"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 23 3 1 #" "
0 0 14 3 4 #"vars"
0 0 23 3 2 #") "
0 0 14 3 4 #"senv"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 18 3 5 #";;ntr"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"letrec-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"p-names"
0 0 23 3 1 #" "
0 0 14 3 6 #"b-vars"
0 0 23 3 1 #" "
0 0 14 3 5 #"bodys"
0 0 23 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 19 #"nameless-letrec-exp"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 3 #") ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 2 #" ("
0 0 14 3 11 #"extend-senv"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 2 #" ("
0 0 14 3 11 #"extend-senv"
0 0 23 3 1 #" "
0 0 14 3 7 #"p-names"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 5 #")))) "
0 0 14 3 6 #"b-vars"
0 0 23 3 1 #" "
0 0 14 3 5 #"bodys"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 23 3 2 #" ("
0 0 14 3 11 #"extend-senv"
0 0 23 3 1 #" "
0 0 14 3 7 #"p-names"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"unpack-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 19 #"nameless-unpack-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                       ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #") "
0 0 14 3 4 #"senv"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"setdyn-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 19 #"nameless-setdyn-exp"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 10 #"apply-senv"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"assign-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 19 #"nameless-assign-exp"
0 0 23 3 2 #" ("
0 0 14 3 10 #"apply-senv"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"beg-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 7 #"beg-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 3 #") ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")) "
0 0 14 3 4 #"exps"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"minus-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"minus-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"add-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 7 #"add-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"multi-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"multi-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"quoti-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"quoti-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"equal?-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 10 #"equal?-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 12 #"greater?-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 12 #"greater?-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                  ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"less?-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"less?-exp"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"proc-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 17 #"nameless-proc-exp"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 23 3 1 #" "
0 0 14 3 4 #"vars"
0 0 23 3 2 #") "
0 0 14 3 4 #"senv"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"call-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 5 #"rands"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 8 #"call-exp"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rand"
0 0 23 3 3 #") ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 3 #")) "
0 0 14 3 5 #"rands"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 20 3 23 #"\"Invalid expression ~s\""
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 18 3 12 #";;trans-help"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"trans-let*"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 4 #"vars"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 21 3 1 #"'"
0 0 23 3 2 #"()"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 3 #"var"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"vars"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 3 #"exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 14 #"translation-of"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 10 #"trans-let*"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"vars"
0 0 23 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 3 #") ("
0 0 14 3 11 #"extend-senv"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"senv"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 18 3 8 #";;\346\261\202\345\200\274"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"value-of"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"const1-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 3 #") ("
0 0 14 3 7 #"num-val"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"const2-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 23 3 3 #") ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 4 #"bool"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 8 #"bool-val"
0 0 23 3 1 #" "
0 0 21 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 8 #"bool-val"
0 0 23 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 16 #"nameless-var-exp"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"post"
0 0 23 3 2 #" ("
0 0 14 3 18 #"apply-nameless-env"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 23 3 1 #" "
0 0 14 3 4 #"post"
0 0 23 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"post"
0 0 23 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"mutable"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"post"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                   "
0 0 14 3 4 #"post"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 13 #"construct-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 4 #"val2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 8 #"cons-exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"emptylist"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 8 #"null-exp"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"car-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 7 #"lst-exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 8 #"cons-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 14 3 3 #"exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 20 3 23 #"\"input are emptylst ~s\""
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"cdr-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 7 #"lst-exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 8 #"cons-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 20 3 23 #"\"input are emptylst ~s\""
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"list-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 10 #"list->cons"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"null?-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 7 #"lst-exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 8 #"null-exp"
0 0 23 3 4 #" () "
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 8 #"bool-val"
0 0 23 3 1 #" "
0 0 21 3 2 #"#t"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 8 #"cons-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 8 #"bool-val"
0 0 23 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 6 #"))))) "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"diff-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 4 #"val2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 4 #"num2"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 7 #"num-val"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 1 #" "
0 0 14 3 4 #"num2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"zero?-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 8 #"bool-val"
0 0 23 3 1 #" "
0 0 21 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 8 #"bool-val"
0 0 23 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 6 #"if-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 12 #"expval->bool"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"cond-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"exps1"
0 0 23 3 1 #" "
0 0 14 3 5 #"exps2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 9 #"cond->val"
0 0 23 3 1 #" "
0 0 14 3 5 #"exps1"
0 0 23 3 1 #" "
0 0 14 3 5 #"exps2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 16 #"nameless-let-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 8 #"let->val"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 23 #"nameless-letmutable-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 15 #"letmutable->val"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 17 #"nameless-let*-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 9 #"let*->val"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 8 #"))      "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 19 #"nameless-letrec-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"bodys"
0 0 23 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 23 3 2 #" ("
0 0 14 3 19 #"extend-nameless-env"
0 0 23 3 1 #" "
0 0 14 3 5 #"bodys"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 19 #"nameless-unpack-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 20 #"nameless-unpack->val"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 19 #"nameless-setdyn-exp"
0 0 23 3 2 #" ("
0 0 14 3 8 #"var-post"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 3 #"val"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 18 #"apply-nameless-env"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #" "
0 0 14 3 8 #"var-post"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 9 #"saved-val"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 2 #" ("
0 0 14 3 16 #"nameless-var-exp"
0 0 23 3 1 #" "
0 0 14 3 8 #"var-post"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"mutable"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 16 3 5 #"begin"
0 0 23 3 2 #" ("
0 0 14 3 7 #"setref!"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                          ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 10 #"return-val"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 7 #"setref!"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 9 #"saved-val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 44 #"                                            "
0 0 14 3 10 #"return-val"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 16 3 5 #"begin"
0 0 23 3 2 #" ("
0 0 14 3 7 #"setref!"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                          ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 10 #"return-val"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 7 #"setref!"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 44 #"                                            "
0 0 14 3 10 #"return-val"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 19 #"nameless-assign-exp"
0 0 23 3 2 #" ("
0 0 14 3 8 #"var-post"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 3 #"val"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                     ("
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 18 #"apply-nameless-env"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #" "
0 0 14 3 8 #"var-post"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"mutable"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                       ("
0 0 16 3 5 #"begin"
0 0 23 3 2 #" ("
0 0 14 3 7 #"setref!"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                              ("
0 0 14 3 7 #"num-val"
0 0 23 3 1 #" "
0 0 21 3 2 #"42"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                       ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"assign-exp"
0 0 23 3 1 #" "
0 0 20 3 28 #"\"assign to unmutable var ~s\""
0 0 23 3 1 #" "
0 0 14 3 8 #"var-post"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"beg-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 8 #"beg->val"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"minus-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 7 #"num-val"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"add-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 4 #"val2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 4 #"num2"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 7 #"num-val"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 1 #" "
0 0 14 3 4 #"num2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"multi-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 4 #"val2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 4 #"num2"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 7 #"num-val"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 1 #" "
0 0 14 3 4 #"num2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"quoti-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 4 #"val2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 4 #"num2"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 7 #"num-val"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 8 #"quotient"
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 1 #" "
0 0 14 3 4 #"num2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"equal?-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 4 #"val2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 4 #"num2"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 8 #"bool-val"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 1 #" "
0 0 14 3 4 #"num2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 12 #"greater?-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 4 #"val2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 14 3 4 #"num2"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 8 #"bool-val"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 1 #" "
0 0 14 3 4 #"num2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"less?-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 4 #"val2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 4 #"num2"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 8 #"bool-val"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 1 #" "
0 0 14 3 4 #"num2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 17 #"nameless-proc-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 8 #"proc-val"
0 0 23 3 2 #" ("
0 0 14 3 9 #"procedure"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"call-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 5 #"rands"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 18 3 50 #";               (eopl:printf \"~s\" rator) (newline)"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 23 3 2 #" ("
0 0 14 3 12 #"expval->proc"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 15 #"apply-procedure"
0 0 23 3 1 #" "
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 5 #"rands"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 20 3 24 #"\"Invalid value ~s in ~s\""
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 18 3 20 #";;value-of help func"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"list->cons"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"null-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"cons-exp"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 10 #"list->cons"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"cond->val"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 5 #"exps1"
0 0 23 3 1 #" "
0 0 14 3 5 #"exps2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 5 #"exps1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 16 3 4 #"cond"
0 0 23 3 1 #" "
0 0 20 3 32 #"\"condition has no element ~s ~s\""
0 0 23 3 1 #" "
0 0 14 3 5 #"exps1"
0 0 23 3 1 #" "
0 0 14 3 5 #"exps2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 5 #"elem1"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 5 #"exps1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 5 #"elem2"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 5 #"exps2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 5 #"rest1"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 5 #"exps1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 5 #"rest2"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 5 #"exps2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 8 #"tiaojian"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 5 #"elem1"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 6 #"jieguo"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 5 #"elem2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 12 #"expval->bool"
0 0 23 3 1 #" "
0 0 14 3 8 #"tiaojian"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 6 #"jieguo"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 9 #"cond->val"
0 0 23 3 1 #" "
0 0 14 3 5 #"rest1"
0 0 23 3 1 #" "
0 0 14 3 5 #"rest2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"let->val"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 3 #"val"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 8 #"let->val"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 2 #") "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #" ("
0 0 14 3 19 #"extend-nameless-env"
0 0 23 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 2 #") "
0 0 14 3 7 #"new-env"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"letmutable->val"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 3 #"val"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 15 #"letmutable->val"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 2 #") "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #" ("
0 0 14 3 19 #"extend-nameless-env"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"mutable"
0 0 23 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 3 #")) "
0 0 14 3 7 #"new-env"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"let*->val"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 3 #"val"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 9 #"let*->val"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 2 #") "
0 0 14 3 4 #"body"
0 0 23 3 2 #" ("
0 0 14 3 19 #"extend-nameless-env"
0 0 23 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 20 #"nameless-unpack->val"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 12 #"expval->bool"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 2 #" ("
0 0 14 3 9 #"null?-exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 4 #")) ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 16 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 3 #"val"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 2 #" ("
0 0 14 3 7 #"car-exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 20 #"nameless-unpack->val"
0 0 23 3 2 #" ("
0 0 14 3 7 #"cdr-exp"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 2 #") "
0 0 14 3 4 #"exp2"
0 0 23 3 2 #" ("
0 0 14 3 19 #"extend-nameless-env"
0 0 23 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 8 #"))))))) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"beg->val"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 2 #") "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"value-of"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 16 3 5 #"begin"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 8 #"value-of"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 8 #"beg->val"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"apply-procedure"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 5 #"proc1"
0 0 23 3 1 #" "
0 0 14 3 5 #"rands"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 5 #"proc1"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"procedure"
0 0 23 3 2 #" ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 18 #"saved-nameless-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 15 #"apply-proc-help"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 5 #"rands"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #" "
0 0 14 3 18 #"saved-nameless-env"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"apply-proc-help"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 5 #"rands"
0 0 23 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 23 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 5 #"rands"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 15 #"apply-proc-help"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 5 #"rands"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 2 #" ("
0 0 14 3 19 #"extend-nameless-env"
0 0 23 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 5 #"rands"
0 0 23 3 2 #") "
0 0 14 3 12 #"nameless-env"
0 0 23 3 3 #")) "
0 0 14 3 7 #"old-env"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 18 3 19 #";;exercise3.23 fact"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"fact"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 20 3 33 #"\"let facthelper = proc (facthelp)"
0 0 20 29 1 #"\n"
0 0 20 3 37 #"                         proc (n,rec)"
0 0 20 29 1 #"\n"
0 0 20 3 37 #"                         if   =?(n,1)"
0 0 20 29 1 #"\n"
0 0 20 3 37 #"                         then     rec"
0 0 20 29 1 #"\n"
0 0 20 3 67
#"                         else ((facthelp facthelp) -(n,1) *(rec,n))"
0 0 20 29 1 #"\n"
0 0 20 3 59
#"       in let fact = proc (n) ((facthelper facthelper) n 1)"
0 0 20 29 1 #"\n"
0 0 20 3 22 #"          in (fact 4)\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 18 3 29 #";;exercise3.24 even? and odd?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"even?-odd?"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 20 3 25 #"\"let helper = proc (help)"
0 0 20 29 1 #"\n"
0 0 20 3 37 #"                     proc (n,panding)"
0 0 20 29 1 #"\n"
0 0 20 3 35 #"                     if     =?(n,0)"
0 0 20 29 1 #"\n"
0 0 20 3 44 #"                     then   if =?(panding,0)"
0 0 20 29 1 #"\n"
0 0 20 3 35 #"                            then #t"
0 0 20 29 1 #"\n"
0 0 20 3 35 #"                            else #f"
0 0 20 29 1 #"\n"
0 0 20 3 44 #"                     else   if =?(panding,0)"
0 0 20 29 1 #"\n"
0 0 20 3 55 #"                            then ((help help) -(n,1) 1)"
0 0 20 29 1 #"\n"
0 0 20 3 55 #"                            else ((help help) -(n,1) 0)"
0 0 20 29 1 #"\n"
0 0 20 3 50 #"      in let even = proc (n) ((helper helper) n 0)"
0 0 20 29 1 #"\n"
0 0 20 3 50 #"             odd  = proc (n) ((helper helper) n 1)"
0 0 20 29 1 #"\n"
0 0 20 3 24 #"             in (odd 3)\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0           0
